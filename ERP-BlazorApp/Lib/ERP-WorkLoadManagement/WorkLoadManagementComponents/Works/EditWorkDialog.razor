@using ERP_WorkLoadManagement.DTOs.Works.Request
@using FluentValidation
@using MudBlazor
@using System.Net.Http.Json
@using System.Text;
@using System.Text.Json;
@inject ISnackbar Snackbar

<MudDialog>
    <TitleContent>
        <MudText Typo="Typo.h6">
            <MudIcon Icon="@Icons.Material.Filled.Edit" Class="mr-3 mb-n1" />
            Edit Work
        </MudText>
    </TitleContent>
    <DialogContent>
        <MudTextField @bind-Value="_work.WorkId" Label="Work ID" ReadOnly="true" />
        <MudTextField @bind-Value="_work.WorkCode" Label="Work Code" />
        <MudTextField @bind-Value="_work.WorkName" Label="Work Name" />
        <MudSelect @bind-Value="_work.WorkType" Label="Work Type">
            @foreach (var option in workTypeList)
            {
                <MudSelectItem Value="@option">@option</MudSelectItem>
            }
        </MudSelect>
        <MudTextField @bind-Value="_work.Description" Label="Description" />
    </DialogContent>
    <DialogActions>
        <MudButton OnClick="Cancel">Cancel</MudButton>

        <MudButton Disabled="@_processing" OnClick="SaveWork" Variant="Variant.Filled" Color="Color.Primary">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Processing</MudText>
            }
            else
            {
                <MudText>Save</MudText>
            }
        </MudButton>
       
    </DialogActions>
</MudDialog>

@code {
    private bool _processing = false;

    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Guid workId { get; set; }

    public EventCallback onAdded { get; set; }

    private HttpClient Http = new HttpClient();

    private UpdateWorkRequest _work = new UpdateWorkRequest();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _work = await Http.GetFromJsonAsync<UpdateWorkRequest>($"https://localhost:7012/api/Work/{workId}");
        }
        catch (Exception ex)
        {
            _work = null;
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async void SaveWork()
    {
        _processing = true;
        var jsonModel = JsonSerializer.Serialize(_work);
        var content = new StringContent(jsonModel, Encoding.UTF8, "application/json");
        var response = await Http.PutAsync($"https://localhost:7012/api/Work/{workId}", content);

        if (response.IsSuccessStatusCode)
        {
            await onAdded.InvokeAsync();
            Snackbar.Add("Work Edited Successfully", MudBlazor.Severity.Success);
            MudDialog.Close(DialogResult.Ok(_work.WorkId));
        }
        else
        {
            Snackbar.Add("Please Check Your Connection.", MudBlazor.Severity.Error);
        }
        _processing = false;
    }

    private List<string> workTypeList = new List<string> { "Module Coordinator", "New Position", "Other" };
}
