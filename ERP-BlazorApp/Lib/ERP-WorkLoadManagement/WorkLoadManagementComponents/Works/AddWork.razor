@using ERP_WorkLoadManagement.DTOs.Works.Request
@using MudBlazor
@using FluentValidation
@using System.Net.Http.Json;
@using System.Text;
@using System.Text.Json;
@inject ISnackbar Snackbar

<MudContainer>
     <MudCard Class="my-4 mx-auto" Style="max-width: 1000px; ">
    <MudCardHeader>
        <MudText Typo="Typo.h6" Color="Color.Primary">
            <MudIcon Icon="@Icons.Material.Filled.Science" Class="mr-2" />
            New Work Create
        </MudText>
    </MudCardHeader>
    <MudCard>
        <MudCardContent>
            <MudForm Model="@model" @ref="@form"
                     Validation="@(workValidator.ValidateValue)"
                     ValidationDelay="0">
                <MudGrid>


                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.WorkCode"
                                      Label="Work Code"
                                      Required="true"
                                      For="@(()=>model.WorkCode)" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.WorkName"
                                      Label="New Work Name"
                                      Required="true"
                                      For="@(()=>model.WorkName)" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudSelect Label="New Work Type" @bind-Value="@model.WorkType">
                            @foreach (var option in workTypeList)
                            {
                                <MudSelectItem Value="@option">@option</MudSelectItem>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField @bind-Value="model.Description"
                                      Label="Description"
                                      Lines="3" />
                    </MudItem>

                </MudGrid>
            </MudForm>
        </MudCardContent>

        <MudCardActions>

            <MudButton Disabled="@_processing" OnClick="@(async () => await Submit())" Variant="Variant.Filled" Color="Color.Primary">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Add</MudText>
                }
            </MudButton>

        </MudCardActions>

    </MudCard>
    </MudCard>
</MudContainer>

@code {
    private bool _processing = false;

    [Parameter]
    public EventCallback onAdded { get; set; }

    private HttpClient Http = new HttpClient();

    private CreateWorkRequest model = new CreateWorkRequest();

    WorkModelValidator workValidator = new WorkModelValidator();
    MudForm form;

    public class WorkModelValidator : AbstractValidator<CreateWorkRequest>
    {
        public WorkModelValidator()
        {
            RuleFor(x => x.WorkName)
                .NotEmpty().WithMessage("Work Name is Required.");

            RuleFor(x => x.WorkType)
                .NotEmpty().WithMessage("Work Type is Required.");

            RuleFor(x => x.WorkCode)
                .NotEmpty().WithMessage("Work Code is Required.");


        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<CreateWorkRequest>
                .CreateWithOptions((CreateWorkRequest)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }

    private async Task Submit()
    {
        _processing = true;
        await form.Validate();
        try
        {
            if (form.IsValid)
            {
                var jsonmodel = JsonSerializer.Serialize(model);
                var content = new StringContent(jsonmodel, Encoding.UTF8, "application/json");
                var response = await Http.PostAsync("https://localhost:7012/api/Work/Add", content);

                if (response.IsSuccessStatusCode)
                {
                    await onAdded.InvokeAsync(null);
                    form.ResetAsync();
                    //Snackbar.Add("Work added successfully", MudBlazor.Severity.Success);
                }
                else
                {
                    Snackbar.Add("Please check your connection.", MudBlazor.Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Please Check Input Fields", MudBlazor.Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", MudBlazor.Severity.Error);
        }
        _processing = false;
    }

    private List<string> workTypeList = new List<string> { "Module Coordinator", "New Position", "Other" };
}
