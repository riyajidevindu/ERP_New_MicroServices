@using ERP_LabEquipmentManagement.DTOs.Response
@using System.Net.Http.Json
@using Microsoft.JSInterop
@using MudBlazor

@inject IJSRuntime jsRuntime
<MudCard Class="my-4 mx-auto" Style="max-width: 1000px; ">
<TitleContent>
    <MudText Typo="Typo.h6" Color="Color.Primary">
			<MudIcon Icon="@Icons.Material.Filled.Search" Class="mr-3 mb-n1" />
			Filter Lab Equipment
		</MudText>
</TitleContent>
@if (_labEquipment.Count > 0)
{

    <MudDataGrid Items="_labEquipment" Filterable="true" Bordered="true" Dense="true">
        <Columns>
            <PropertyColumn Property="x => x.EquipmentRegisterId" Title="Register ID" />
            <PropertyColumn Property="x => x.EquipmentName" Title="Lab Equipment Name" />
            <PropertyColumn Property="x => x.SelectCategory" Title="Selected Category" />
            <PropertyColumn Property="x => x.IsActive" Title="Availability of Lab Equipment" />
            <PropertyColumn Property="x => x.Location" Title="Location" />
            <PropertyColumn Property="x => x.Price" Title="Price" />
            <PropertyColumn Property="x => x.PurchasedDate" Title="Purchased Date" Format="yyyy-MM-dd" />
              
            <PropertyColumn Property="x => x.Description" Title="Description" />
        </Columns>

        <PagerContent>
            <MudDataGridPager />
        </PagerContent>
    </MudDataGrid>

    <div style="margin-top: 20px;">

        <MudButton Disabled="@_processing" OnClick="@ExportToExcel" Variant="Variant.Filled" Color="Color.Primary">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Processing</MudText>
            }
            else
            {
                <MudText>Export to Excel</MudText>
            }
        </MudButton>

    </div>
}
else
{
    <p>No Lab Equipments to Show</p>
}
</MudCard>

@code {
    private bool _processing = false;

    private HttpClient Http = new HttpClient();

    private List<GetLabEquipmentResponse> _labEquipment = new List<GetLabEquipmentResponse>();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            _labEquipment = await Http.GetFromJsonAsync<List<GetLabEquipmentResponse>>("https://localhost:7011/api/LabEquipment/Get");
        }
        catch (Exception ex)
        {
            _labEquipment = null;
        }
    }

    private async Task ExportToExcel()
    {
        _processing = true;
        var response = await Http.GetAsync("https://localhost:7011/api/LabEquipment/export");
        if (response.IsSuccessStatusCode)
        {
            var fileName = "Lab_Equipments.xlsx";
            var content = await response.Content.ReadAsByteArrayAsync();
            await jsRuntime.InvokeVoidAsync("saveAsFile", fileName, Convert.ToBase64String(content));
        }
        _processing = false;
    }

}

