@page "/add-lab-equipment"
@using ERP_LabEquipmentManagement.DTOs.Request
@using LabEquipmentComponents
@using MudBlazor
@using FluentValidation
@using System.Net.Http.Json
@using System.Text.Json
@using System.Text
@using Microsoft.AspNetCore.Components.Forms
@using System.Net.Http.Headers

@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar

<MudCard Class="my-4 mx-auto" Style="max-width: 1000px; ">
    <MudCardHeader>
        <MudText Typo="Typo.h6" Color="Color.Primary">
            <MudIcon Icon="@Icons.Material.Filled.Science" Class="mr-2" />
            Add Lab Equipment Details
        </MudText>
    </MudCardHeader>
    <MudForm Model="@model" @ref="form" Validation="@(labEquipmentValidator.ValidateValue)" ValidationDelay="0">
        <MudCardContent>
            <MudGrid Spacing="3">
                <MudItem xs="12">
                    <MudTextField @bind-Value="model.EquipmentRegisterId"
                                  For="@(() => model.EquipmentRegisterId)"
                                  Immediate="true"
                                  Label="Register ID"
                                  Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="model.EquipmentName"
                                  Immediate="true"
                                  Label="Lab Equipment Name"
                                  Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="12">
                    <MudDatePicker @bind-Date="model.PurchasedDate" Immediate="true" Required="true"
                                   Label="Purchased Date"
                                   For="@(() => model.PurchasedDate)"
                                   Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="12">
                    <MudSelect Label="Select the Category" @bind-Value="model.SelectCategory" Variant="Variant.Outlined">
                        @foreach (var option in options)
                        {
                            <MudSelectItem Value="@option">@option</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                    <MudCheckBox @bind-Value="model.IsActive" Label="Lab Equipment is Available"
                                 Immediate="true" />
                </MudItem>
                <MudItem xs="12">
                    <MudSelect Label="Select the Location" @bind-Value="model.Location" Variant="Variant.Outlined">
                        @foreach (var optionlocation in optionlocations)
                        {
                            <MudSelectItem Value="@optionlocation">@optionlocation</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="model.Price"
                                  For="@(() => model.Price)"
                                  Immediate="true"
                                  Label="Price"
                                  Variant="Variant.Outlined" />
                </MudItem>
                <MudItem xs="12">
                    <MudTextField @bind-Value="model.Description"
                                  Immediate="true"
                                  Label="Description"
                                  Variant="Variant.Outlined"
                                  Lines="3" />
                </MudItem>
            </MudGrid>
        </MudCardContent>
        <MudCardActions>
            <MudButton Disabled="@_processing" OnClick="@(async () => await Submit())" Variant="Variant.Filled" Color="Color.Primary">
                @if (_processing)
                {
                    <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                    <MudText Class="ms-2">Processing</MudText>
                }
                else
                {
                    <MudText>Add</MudText>
                }
            </MudButton>
        </MudCardActions>
    </MudForm>
</MudCard>

<MudCard Class="my-4 mx-auto" Style="max-width: 1000px;">
    <MudPaper Class="pa-4 mt-4 custom-line-spacing" Style="padding-bottom: 40px;">
        <h5 Style="margin-bottom: 30px;">Please use the below button for the bulk uploads.</h5>
        <MudItem xs="12" Style="margin-bottom: 30px;">
            <InputFile OnChange="HandleFileSelected" />
        </MudItem>
        <MudButton Disabled="@_processing" OnClick="@(async () => await UploadFile())" Variant="Variant.Filled" Color="Color.Primary">
            @if (_processing)
            {
                <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true" />
                <MudText Class="ms-2">Processing</MudText>
            }
            else
            {
                <MudText>Bulk Add</MudText>
            }
        </MudButton>
    </MudPaper>
</MudCard>

@code {
    private bool _processing = false;

    [Parameter]
    public EventCallback onAdded { get; set; }

    private HttpClient Http = new HttpClient();

    private CreateLabEquipmentRequest model = new CreateLabEquipmentRequest();
    LabEquipmentModelValidator labEquipmentValidator = new LabEquipmentModelValidator();
    MudForm form;
    private IBrowserFile selectedFile;

    public class LabEquipmentModelValidator : AbstractValidator<CreateLabEquipmentRequest>
    {
        public LabEquipmentModelValidator()
        {
            RuleFor(x => x.Price)
                .GreaterThan(0).WithMessage("Price must be greater than zero.");

            RuleFor(x => x.EquipmentRegisterId)
                .NotEmpty()
                .Length(1, 50);

            RuleFor(x => x.PurchasedDate)
                .NotEmpty().WithMessage("Purchased Date is required.")
                .Must(BeAValidDate).WithMessage("Purchased Date must not be a future date.");
        }

        private bool BeAValidDate(DateTime? date)
        {
            return date <= DateTime.Now;
        }

        public Func<object, string, Task<IEnumerable<string>>> ValidateValue => async (model, propertyName) =>
        {
            var result = await ValidateAsync(ValidationContext<CreateLabEquipmentRequest>
                                .CreateWithOptions((CreateLabEquipmentRequest)model, x => x.IncludeProperties(propertyName)));
            if (result.IsValid)
                return Array.Empty<string>();
            return result.Errors.Select(e => e.ErrorMessage);
        };
    }

    private async Task Submit()
    {
        _processing = true;
        await form.Validate();
        try
        {
            if (form.IsValid)
            {
                var jsonModel = JsonSerializer.Serialize(model);
                var content = new StringContent(jsonModel, Encoding.UTF8, "application/json");
                var response = await Http.PostAsync("https://localhost:7011/api/LabEquipment/Add", content);

                if (response.IsSuccessStatusCode)
                {
                    await onAdded.InvokeAsync();
                    ResetForm();
                    Snackbar.Add("Lab equipment added successfully.", MudBlazor.Severity.Success);
                }
                else
                {
                    Snackbar.Add("Please check your connection.", MudBlazor.Severity.Error);
                }
            }
            else
            {
                Snackbar.Add("Please check input fields.", MudBlazor.Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", MudBlazor.Severity.Error);
        }
        _processing = false;
    }

    private void ResetForm()
    {
        model = new CreateLabEquipmentRequest();
        form.ResetValidation();
    }

    private void HandleFileSelected(InputFileChangeEventArgs e)
    {
        selectedFile = e.File;
    }

    private async Task UploadFile()
    {
        _processing = true;
        if (selectedFile != null)
        {
            var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024)); // 10MB limit
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(selectedFile.ContentType);
            content.Add(fileContent, "file", selectedFile.Name);

            var response = await Http.PostAsync("https://localhost:7011/api/LabEquipment/bulk-add-labEquipment", content);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Lab equipments added successfully.", MudBlazor.Severity.Success);
            }
            else
            {
                Snackbar.Add("Error uploading file.", MudBlazor.Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("No file selected.", MudBlazor.Severity.Warning);
        }
        _processing = false;
    }

    private List<string> options = new List<string>
    {
        "Basic Electrical Measurement", "Circuit Design and Analysis", "Control Systems",
        "Communication Systems", "Digital Signal Processing (DSP)", "Microcontroller and Embedded Systems",
        "Power Electronics", "Networking and Information", "Computer Aided Design (CAD) and Simulation",
        "Safety Equipment"
    };

    private List<string> optionlocations = new List<string>
    {
        "Undergraduate Lab", "Lab1", "Lab2", "Lab3", "Lab4"
    };
}
