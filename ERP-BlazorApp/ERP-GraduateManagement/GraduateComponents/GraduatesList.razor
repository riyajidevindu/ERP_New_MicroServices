@using ERP_GraduateManagement.DTOs.Response
@using System.Net.Http.Json
@using MudBlazor
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar


@if(_graduates.Count>0)
{
    <MudTable Items="@_graduates">
        <HeaderContent>
            <MudTh>Full Name</MudTh>
            <MudTh>Degree</MudTh>
            <MudTh>Current Company</MudTh>
            <MudTh>Position</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="FullName">@context.FullName</MudTd>
                <MudTd DataLabel="Degree">@context.Degree</MudTd>
                <MudTd DataLabel="Company">@context.CurrentCompany</MudTd>
                <MudTd DataLabel="Position">@context.CurrentJobPosition</MudTd>
                <MudTd DataLabel="">
                    <div class="button-group">
                        <MudFab Color="Color.Secondary" OnClick="@(()=>ShowGraduate(context.GraduateId))"
                                StartIcon="@Icons.Material.Filled.Person" Size="Size.Small" />
                        <MudFab Color="Color.Primary" OnClick="@(()=>EditGraduate(context.GraduateId))"
                                StartIcon="@Icons.Material.Filled.Edit" Size="Size.Small" />
                        <MudFab Color="Color.Warning" OnClick="@(()=>DeleteGraduate(context.GraduateId))"
                                StartIcon="@Icons.Material.Filled.Delete" Size="Size.Small" />
                    </div>
                </MudTd>
        </RowTemplate>
    <PagerContent>
        <MudTablePager />
    </PagerContent>

        </MudTable>
}
else
{
    <MudProgressLinear Color="Color.Primary" Size="Size.Large" Indeterminate="true" Class="my-7" />
}




<MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
        <MessageContent>
            Are You Sure to Delete This Graduate!
        </MessageContent>
        <YesButton>
            <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
        </YesButton>
</MudMessageBox>

    @code {
    private string buttonGroupStyle = "display: flex; gap: 8px;";


    private HttpClient Http = new HttpClient();

    MudMessageBox mbox { get; set; }

    public EventCallback onDelete { get; set; }

    private List<GetGraduateResponse> _graduates = new List<GetGraduateResponse>();


    protected override async Task OnInitializedAsync()
    {
        try
        {
            _graduates = await Http.GetFromJsonAsync<List<GetGraduateResponse>>("https://localhost:7010/api/Graduates/Get");
        }
        catch(Exception ex)
        {
            _graduates = null;
        }
    }

    async Task ShowGraduate(Guid graduateId)
    {
        var parameters = new DialogParameters<GraduateProfileDialog> { { x => x.graduateId, graduateId } };

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true,
                Position = DialogPosition.Center,
                CloseOnEscapeKey = true,
                CloseButton = true
            };

        var dialog = await DialogService.ShowAsync <GraduateProfileDialog> ("Graduate Profile", parameters, options);
     
    }


    async Task EditGraduate(Guid graduateId)
    {
        var parameters = new DialogParameters<EditGraduateDialog> { {x => x.graduateId, graduateId } };

        var options = new DialogOptions
        {
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true,
                Position = DialogPosition.CenterLeft,
                CloseOnEscapeKey = true,
                CloseButton = true
        };

        var dialog = await DialogService.ShowAsync<EditGraduateDialog>("Save", parameters,options);
        var result = await dialog.Result;

        if(!result.Canceled)
        {
            _graduates = await Http.GetFromJsonAsync<List<GetGraduateResponse>>("https://localhost:7010/api/Graduates/Get");
        }
    }



    async Task DeleteGraduate(Guid graduateId)
    {
        bool? result = await mbox.Show();
        if (result == true)
        {            
            var response = await Http.DeleteAsync($"https://localhost:7010/api/Graduates/{graduateId}");

            if(response.IsSuccessStatusCode)
            {
                Snackbar.Add("Graduate Deleted Successfully", Severity.Success);
                _graduates = await Http.GetFromJsonAsync<List<GetGraduateResponse>>("https://localhost:7010/api/Graduates/Get");
                StateHasChanged();
            }
            else
            {
                Snackbar.Add("Connection error. Graduate is not deleted.", Severity.Error);
            }

        }
        else
        {
            Snackbar.Add("Graduate is Not Deleted", Severity.Info);
        }

        
    }

    
}
