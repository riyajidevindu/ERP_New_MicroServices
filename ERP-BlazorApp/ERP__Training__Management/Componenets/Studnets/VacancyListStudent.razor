@using System.Net.Http.Json
@using Blazored.SessionStorage

@using Microsoft.AspNetCore.Components.Authorization
@using MudBlazor
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar
@inject ISessionStorageService SessionStorage
@inject AuthenticationStateProvider AuthenticationStateProvider


<MudTextField T="string" Label="Search" @bind-Value="_searchString" Immediate="true" Placeholder="Search by title, description, or company" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" Margin="Margin.Dense" Class="my-2" />

@if (_filteredInternshipVacancies.Count > 0)
{
    <MudTable Items="@_filteredInternshipVacancies">
        <HeaderContent>
            <MudTh>Title</MudTh>
            <MudTh>Description</MudTh>
            <MudTh>Company</MudTh>
            <MudTh>Created Date</MudTh>
            <MudTh>Actions</MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Title">@context.Title</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Company">@context.Company</MudTd>
            <MudTd DataLabel="CreatedDate">@context.CreatedDate.ToString("yyyy-MM-dd")</MudTd>
            <MudTd DataLabel="Actions">
                <div class="button-group" style="@buttonGroupStyle">
                    <MudFab Color="Color.Secondary" OnClick="@(async () => await ShowVacancy(context.Id))"
                            StartIcon="@Icons.Material.Filled.Info" Size="Size.Small" />
                    <InputFile OnChange="@(e => HandleFileSelected(e, context.Id))" />
                    <MudFab Color="Color.Primary" OnClick="@(async () => await UploadCV(context.Id))"
                            StartIcon="@Icons.Material.Filled.UploadFile" Size="Size.Small" />
                </div>
            </MudTd>
        </RowTemplate>
        <PagerContent>
            <MudTablePager />
        </PagerContent>
    </MudTable>
}
else
{
    <MudProgressLinear Color="Color.Primary" Size="Size.Large" Indeterminate="true" Class="my-7" />
}

<MudMessageBox @ref="mbox" Title="Warning" CancelText="Cancel">
    <MessageContent>
        Are you sure you want to delete this internship vacancy?
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
    </YesButton>
</MudMessageBox>

@code {
    private string buttonGroupStyle = "display: flex; gap: 8px;";
    private HttpClient Http = new HttpClient();
    MudMessageBox mbox { get; set; }
    public EventCallback onDelete { get; set; }

    private List<InternshipVacancy> _internshipVacancies = new List<InternshipVacancy>();
    private List<InternshipVacancy> _filteredInternshipVacancies => string.IsNullOrWhiteSpace(_searchString)
        ? _internshipVacancies
        : _internshipVacancies.Where(v =>
            v.Title.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
            v.Description.Contains(_searchString, StringComparison.OrdinalIgnoreCase) ||
            v.Company.Contains(_searchString, StringComparison.OrdinalIgnoreCase)).ToList();

    private string _searchString = string.Empty;
    private Dictionary<Guid, IBrowserFile> _selectedFiles = new Dictionary<Guid, IBrowserFile>();
    private Guid studentId = Guid.Parse("1EA0E241-DC0F-4786-9A5F-10D6BE45C3B0"); // Example student ID

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _internshipVacancies = await Http.GetFromJsonAsync<List<InternshipVacancy>>("https://localhost:7270/api/InternshipVacancy/Get");
        }
        catch (Exception ex)
        {
            _internshipVacancies = null;
            Snackbar.Add("Failed to load internship vacancies.", Severity.Error);
        }
    }

    private async Task ShowVacancy(Guid vacancyId)
    {
        var parameters = new DialogParameters { { "VacancyId", vacancyId } };

        var options = new DialogOptions
            {
                MaxWidth = MaxWidth.ExtraSmall,
                FullWidth = true,
                Position = DialogPosition.Center,
                CloseOnEscapeKey = true,
                CloseButton = true
            };

        var dialog = DialogService.Show<Coordinator.InternshipVacancyProfileDialog>("Vacancy Profile", parameters, options);
        await dialog.Result;
    }

    private void HandleFileSelected(InputFileChangeEventArgs e, Guid vacancyId)
    {
        _selectedFiles[vacancyId] = e.File;
    }

    private async Task UploadCV(Guid vacancyId)
    {
        var authResponseJson = await SessionStorage.GetItemAsync<string>("authResponse");

        if (string.IsNullOrEmpty(authResponseJson))
        {
            Snackbar.Add("User details not found. Please log in again.", Severity.Error);
            return;
        }

        // Deserialize the AuthResponse object
        var authResponse = JsonSerializer.Deserialize<AuthResponse>(authResponseJson);

        if (authResponse == null)
        {
            Snackbar.Add("Failed to retrieve user details. Please log in again.", Severity.Error);
            return;
        }

        var FirstName = authResponse.FirstName;
       


        

        if (_selectedFiles.TryGetValue(vacancyId, out var selectedFile))
        {
            var content = new MultipartFormDataContent();
            var fileContent = new StreamContent(selectedFile.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024)); // Max 10 MB
            fileContent.Headers.ContentType = new System.Net.Http.Headers.MediaTypeHeaderValue(selectedFile.ContentType);
            content.Add(fileContent, "File", selectedFile.Name);

            content.Add(new StringContent(studentId.ToString()), "StudentId");
            content.Add(new StringContent(vacancyId.ToString()), "VacancyId");
            content.Add(new StringContent(FirstName), "FirstName");

            var uploadUrl = $"https://localhost:7270/api/File/upload/cv/{vacancyId}/{studentId}/{FirstName}";

            var response = await Http.PostAsync(uploadUrl, content);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("CV uploaded successfully.", Severity.Success);
                _selectedFiles[vacancyId] = null; // Clear the selected file
                StateHasChanged(); // Trigger a re-render to update the UI
            }
            else
            {
                Snackbar.Add("Failed to upload CV.", Severity.Error);
            }
        }
        else
        {
            Snackbar.Add("Please select a file before uploading.", Severity.Warning);
        }
    }
    public class AuthResponse
    {
        public string Token { get; set; }
        public DateTime Expiration { get; set; }
        public List<string> Roles { get; set; }

        public string FirstName { get; set; }


    }

    public class InternshipVacancy
    {
        public Guid Id { get; set; }
        public string Title { get; set; }
        public string Description { get; set; }
        public string Company { get; set; }
        public DateTime CreatedDate { get; set; }
        public DateTime ModifiedDate { get; set; }
    }
}
