// <auto-generated />
using System;
using ERP.LabScheduleManagement.DataServices.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ERP.LabScheduleManagement.DataServices.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20240505144953_fourthmigration")]
    partial class fourthmigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.4");

            modelBuilder.Entity("ERP.LabScheduleManagement.Core.Entities.Lab", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("LabDescription")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LabName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ModuleId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ModuleId");

                    b.ToTable("Labs");
                });

            modelBuilder.Entity("ERP.LabScheduleManagement.Core.Entities.LabCoordinator", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("CoordinatorName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LabCoordinators");
                });

            modelBuilder.Entity("ERP.LabScheduleManagement.Core.Entities.LabEquipment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("EquipmentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Location")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("ScheduledLabId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("ScheduledLabId");

                    b.ToTable("LabEquipments");
                });

            modelBuilder.Entity("ERP.LabScheduleManagement.Core.Entities.LabGroup", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Batch")
                        .HasColumnType("INTEGER");

                    b.Property<string>("GroupNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NoOfStudents")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Specilization")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LabGroups");
                });

            modelBuilder.Entity("ERP.LabScheduleManagement.Core.Entities.LabInstructor", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("InstructorName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LabInstructors");
                });

            modelBuilder.Entity("ERP.LabScheduleManagement.Core.Entities.LabSpace", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Floor")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("SpaceName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<string>("TableNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("LabSpaces");
                });

            modelBuilder.Entity("ERP.LabScheduleManagement.Core.Entities.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ModuleCoordinator")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("NoofLabs")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("ERP.LabScheduleManagement.Core.Entities.ScheduledLab", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Completed")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("LabCoordinatorId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LabId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LabInstructorId")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LabSpaceId")
                        .HasColumnType("TEXT");

                    b.Property<bool>("Resheduled")
                        .HasColumnType("INTEGER");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<Guid?>("TimeSlotId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("LabCoordinatorId");

                    b.HasIndex("LabId");

                    b.HasIndex("LabInstructorId");

                    b.HasIndex("LabSpaceId");

                    b.HasIndex("TimeSlotId");

                    b.ToTable("ScheduledLabs");
                });

            modelBuilder.Entity("ERP.LabScheduleManagement.Core.Entities.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("LabGroupId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("RegNo")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.Property<bool>("present")
                        .HasColumnType("INTEGER");

                    b.HasKey("Id");

                    b.HasIndex("LabGroupId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("ERP.LabScheduleManagement.Core.Entities.TimeSlot", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("BookedDate")
                        .HasColumnType("TEXT");

                    b.Property<double>("Duration")
                        .HasColumnType("REAL");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("RescheduledDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("TimeSlots");
                });

            modelBuilder.Entity("ScheduledLabLabGroups", b =>
                {
                    b.Property<Guid>("LabGroupsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ScheduledLabsId")
                        .HasColumnType("TEXT");

                    b.HasKey("LabGroupsId", "ScheduledLabsId");

                    b.HasIndex("ScheduledLabsId");

                    b.ToTable("ScheduledLabLabGroups");
                });

            modelBuilder.Entity("ERP.LabScheduleManagement.Core.Entities.Lab", b =>
                {
                    b.HasOne("ERP.LabScheduleManagement.Core.Entities.Module", "Module")
                        .WithMany("Labs")
                        .HasForeignKey("ModuleId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Lab_Module");

                    b.Navigation("Module");
                });

            modelBuilder.Entity("ERP.LabScheduleManagement.Core.Entities.LabEquipment", b =>
                {
                    b.HasOne("ERP.LabScheduleManagement.Core.Entities.ScheduledLab", "ScheduledLab")
                        .WithMany("LabEquipmets")
                        .HasForeignKey("ScheduledLabId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_LabEquipments_ScheduledLab");

                    b.Navigation("ScheduledLab");
                });

            modelBuilder.Entity("ERP.LabScheduleManagement.Core.Entities.ScheduledLab", b =>
                {
                    b.HasOne("ERP.LabScheduleManagement.Core.Entities.LabCoordinator", "LabCoordinator")
                        .WithMany("ScheduledLabs")
                        .HasForeignKey("LabCoordinatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_ScheduledLabs_LabCoordinator");

                    b.HasOne("ERP.LabScheduleManagement.Core.Entities.Lab", "Lab")
                        .WithMany("ScheduledLabs")
                        .HasForeignKey("LabId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_ScheduledLabs_Lab");

                    b.HasOne("ERP.LabScheduleManagement.Core.Entities.LabInstructor", "LabInstructor")
                        .WithMany("ScheduledLabs")
                        .HasForeignKey("LabInstructorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_ScheduledLabs_LabInstructor");

                    b.HasOne("ERP.LabScheduleManagement.Core.Entities.LabSpace", "LabSpace")
                        .WithMany("ScheduledLabs")
                        .HasForeignKey("LabSpaceId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_ScheduledLabs_LabSpace");

                    b.HasOne("ERP.LabScheduleManagement.Core.Entities.TimeSlot", "TimeSlot")
                        .WithMany("ScheduledLabs")
                        .HasForeignKey("TimeSlotId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_ScheduledLabs_TimeSlot");

                    b.Navigation("Lab");

                    b.Navigation("LabCoordinator");

                    b.Navigation("LabInstructor");

                    b.Navigation("LabSpace");

                    b.Navigation("TimeSlot");
                });

            modelBuilder.Entity("ERP.LabScheduleManagement.Core.Entities.Student", b =>
                {
                    b.HasOne("ERP.LabScheduleManagement.Core.Entities.LabGroup", "LabGroup")
                        .WithMany("Students")
                        .HasForeignKey("LabGroupId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .HasConstraintName("FK_Students_LabGroup");

                    b.Navigation("LabGroup");
                });

            modelBuilder.Entity("ScheduledLabLabGroups", b =>
                {
                    b.HasOne("ERP.LabScheduleManagement.Core.Entities.LabGroup", null)
                        .WithMany()
                        .HasForeignKey("LabGroupsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.LabScheduleManagement.Core.Entities.ScheduledLab", null)
                        .WithMany()
                        .HasForeignKey("ScheduledLabsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ERP.LabScheduleManagement.Core.Entities.Lab", b =>
                {
                    b.Navigation("ScheduledLabs");
                });

            modelBuilder.Entity("ERP.LabScheduleManagement.Core.Entities.LabCoordinator", b =>
                {
                    b.Navigation("ScheduledLabs");
                });

            modelBuilder.Entity("ERP.LabScheduleManagement.Core.Entities.LabGroup", b =>
                {
                    b.Navigation("Students");
                });

            modelBuilder.Entity("ERP.LabScheduleManagement.Core.Entities.LabInstructor", b =>
                {
                    b.Navigation("ScheduledLabs");
                });

            modelBuilder.Entity("ERP.LabScheduleManagement.Core.Entities.LabSpace", b =>
                {
                    b.Navigation("ScheduledLabs");
                });

            modelBuilder.Entity("ERP.LabScheduleManagement.Core.Entities.Module", b =>
                {
                    b.Navigation("Labs");
                });

            modelBuilder.Entity("ERP.LabScheduleManagement.Core.Entities.ScheduledLab", b =>
                {
                    b.Navigation("LabEquipmets");
                });

            modelBuilder.Entity("ERP.LabScheduleManagement.Core.Entities.TimeSlot", b =>
                {
                    b.Navigation("ScheduledLabs");
                });
#pragma warning restore 612, 618
        }
    }
}
