// <auto-generated />
using System;
using ERP.StudentRegistration.DataService.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ERP.ModuleRegistration.DataService.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "8.0.2");

            modelBuilder.Entity("ERP.ModuleRegistration.Core.Entity.Lecturer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmployeeNumber")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Lecturers");
                });

            modelBuilder.Entity("ERP.ModuleRegistration.Core.Entity.Module", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("Credits")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Curriculum")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Department")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ModuleCode")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("ModuleName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Modules");
                });

            modelBuilder.Entity("ERP.ModuleRegistration.Core.Entity.ModuleOffering", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("CoordinatorId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ModuleId")
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("CoordinatorId");

                    b.ToTable("ModuleOfferings");
                });

            modelBuilder.Entity("ERP.ModuleRegistration.Core.Entity.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("AdvisorId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("RegisteredDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Status")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdateDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("AdvisorId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("ModuleOfferingFirstExaminer", b =>
                {
                    b.Property<Guid>("FirstExaminationsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("FirstExaminersId")
                        .HasColumnType("TEXT");

                    b.HasKey("FirstExaminationsId", "FirstExaminersId");

                    b.HasIndex("FirstExaminersId");

                    b.ToTable("ModuleOfferingFirstExaminer");
                });

            modelBuilder.Entity("ModuleOfferingModerator", b =>
                {
                    b.Property<Guid>("ModerationsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ModeratorsId")
                        .HasColumnType("TEXT");

                    b.HasKey("ModerationsId", "ModeratorsId");

                    b.HasIndex("ModeratorsId");

                    b.ToTable("ModuleOfferingModerator");
                });

            modelBuilder.Entity("ModuleOfferingSecondExaminer", b =>
                {
                    b.Property<Guid>("SecondExaminationsId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("SecondExaminersId")
                        .HasColumnType("TEXT");

                    b.HasKey("SecondExaminationsId", "SecondExaminersId");

                    b.HasIndex("SecondExaminersId");

                    b.ToTable("ModuleOfferingSecondExaminer");
                });

            modelBuilder.Entity("ModuleOfferingStudent", b =>
                {
                    b.Property<Guid>("ModulesId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("StudentsId")
                        .HasColumnType("TEXT");

                    b.HasKey("ModulesId", "StudentsId");

                    b.HasIndex("StudentsId");

                    b.ToTable("ModuleOfferingStudent");
                });

            modelBuilder.Entity("ERP.ModuleRegistration.Core.Entity.ModuleOffering", b =>
                {
                    b.HasOne("ERP.ModuleRegistration.Core.Entity.Lecturer", "Coordinator")
                        .WithMany("Coordinations")
                        .HasForeignKey("CoordinatorId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Coordinator");
                });

            modelBuilder.Entity("ERP.ModuleRegistration.Core.Entity.Student", b =>
                {
                    b.HasOne("ERP.ModuleRegistration.Core.Entity.Lecturer", "Advisor")
                        .WithMany("Advicees")
                        .HasForeignKey("AdvisorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Advisor");
                });

            modelBuilder.Entity("ModuleOfferingFirstExaminer", b =>
                {
                    b.HasOne("ERP.ModuleRegistration.Core.Entity.ModuleOffering", null)
                        .WithMany()
                        .HasForeignKey("FirstExaminationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.ModuleRegistration.Core.Entity.Lecturer", null)
                        .WithMany()
                        .HasForeignKey("FirstExaminersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModuleOfferingModerator", b =>
                {
                    b.HasOne("ERP.ModuleRegistration.Core.Entity.ModuleOffering", null)
                        .WithMany()
                        .HasForeignKey("ModerationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.ModuleRegistration.Core.Entity.Lecturer", null)
                        .WithMany()
                        .HasForeignKey("ModeratorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModuleOfferingSecondExaminer", b =>
                {
                    b.HasOne("ERP.ModuleRegistration.Core.Entity.ModuleOffering", null)
                        .WithMany()
                        .HasForeignKey("SecondExaminationsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.ModuleRegistration.Core.Entity.Lecturer", null)
                        .WithMany()
                        .HasForeignKey("SecondExaminersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ModuleOfferingStudent", b =>
                {
                    b.HasOne("ERP.ModuleRegistration.Core.Entity.ModuleOffering", null)
                        .WithMany()
                        .HasForeignKey("ModulesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ERP.ModuleRegistration.Core.Entity.Student", null)
                        .WithMany()
                        .HasForeignKey("StudentsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ERP.ModuleRegistration.Core.Entity.Lecturer", b =>
                {
                    b.Navigation("Advicees");

                    b.Navigation("Coordinations");
                });
#pragma warning restore 612, 618
        }
    }
}
